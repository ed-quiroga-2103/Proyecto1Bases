-- CREATE TABLE Warehouse (
--    IdWarehouse INTEGER,
--    PRIMARY KEY (IdWarehouse)
-- );

-- CREATE TABLE Shipment (
--     IdShipment INTEGER PRIMARY KEY,
--     IdWarehouse INTEGER NOT NULL,
--     IdStore INTEGER NOT NULL,
--     RequestDate DATE NOT NULL,
--     DeliveryDate DATE NOT NULL,
--     FOREIGN KEY (IdWarehouse) REFERENCES Warehouse (IdWarehouse),
--     FOREIGN KEY (IdStore) REFERENCES Store (IdStore)
-- );

-- CREATE TABLE ItemShipment (
--     IdShipment INTEGER NOT NULL,
--     IdItem INTEGER NOT NULL,
--     FOREIGN KEY (IdShipment) REFERENCES Shipment (IdShipment),
--     FOREIGN KEY (IdItem) REFERENCES Item (IdItem)
-- );

-- CREATE TABLE Item (
--    IdItem INTEGER PRIMARY KEY,
--    Code VARCHAR NOT NULL,
--    Brand VARCHAR NOT NULL,
--    Description VARCHAR NOT NULL,
--    Category VARCHAR NOT NULL,
--    Price INTEGER NOT NULL,
--    Status VARCHAR,
--    EntryDate DATE NOT NULL
-- );

-- CREATE TABLE Promo (
--     IdPromo INTEGER PRIMARY KEY,
--     IdStore INTEGER NOT NULL,
--     IdItem INTEGER NOT NULL,
--     InitialDateTime timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
--     FinalDateTime timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
--     Porcentaje INTEGER NOT NULL
-- );

-- CREATE TABLE Admin (
--     IdAdmin INTEGER PRIMARY KEY
-- );

-- CREATE TABLE Store (
--     IdStore INTEGER PRIMARY KEY,
--     Code VARCHAR NOT NULL,
--     IdAddress INTEGER NOT NULL,
--     Status VARCHAR,
--     IdAdmin INTEGER NOT NULL,
--     IdWarehouse INTEGER NOT NULL,
--     FOREIGN KEY (IdAddress) REFERENCES Address (IdAddress),
--     FOREIGN KEY (IdAdmin) REFERENCES Admin (IdAdmin),
--     FOREIGN KEY (IdWarehouse) REFERENCES Warehouse (IdWarehouse)
-- );

-- CREATE TABLE ItemStore (
--     IdStore INTEGER NOT NULL,
--     IdItem INTEGER NOT NULL,
--     Quantity INTEGER NOT NULL,
--     Details VARCHAR NOT NULL,
--     FOREIGN KEY (IdStore) REFERENCES Store (IdStore),
--     FOREIGN KEY (IdItem) REFERENCES Item (IdItem)
-- );

-- CREATE TABLE ItemReceipt (
--     IdReceipt INTEGER NOT NULL,
--     IdItem INTEGER NOT NULL,
--     Quantity INTEGER NOT NULL,
--     FOREIGN KEY (IdReceipt) REFERENCES Receipt (IdReceipt),
--     FOREIGN KEY (IdItem) REFERENCES Item (IdItem)
-- );

-- CREATE TABLE Receipt (
--     IdReceipt INTEGER PRIMARY KEY,
--     IdEmployee INTEGER NOT NULL,
--     IdStore INTEGER NOT NULL,
--     Price INTEGER NOT NULL,
--     SellingDate timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
--     FOREIGN KEY (IdEmployee) REFERENCES Employee (IdEmployee),
--     FOREIGN KEY (IdStore) REFERENCES Store (IdStore)
-- );

-- CREATE TABLE ItemWarehouse (
--     IdWarehouse INTEGER NOT NULL,
--     IdItem INTEGER NOT NULL,
--     Quantity INTEGER NOT NULL,
--     FOREIGN KEY (IdWarehouse) REFERENCES Warehouse (IdWarehouse),
--     FOREIGN KEY (IdItem) REFERENCES Item (IdItem)
-- );

-- CREATE TABLE EmployeeStore (
--     IdEmployee INTEGER NOT NULL,
--     IdStore INTEGER NOT NULL,
--     FOREIGN KEY (IdEmployee) REFERENCES Employee (IdEmployee),
--     FOREIGN KEY (IdStore) REFERENCES Store (IdStore)
-- );

-- CREATE TABLE Employee (
--     IdEmployee INTEGER PRIMARY KEY,
--     IdPerson INTEGER NOT NULL,
--     IdStore INTEGER NOT NULL,
--     IdWarehouse INTEGER NOT NULL,
--     Status VARCHAR,
--     FOREIGN KEY (IdPerson) REFERENCES Person (IdPerson),
--     FOREIGN KEY (IdStore) REFERENCES Store (IdStore),
--     FOREIGN KEY (IdWarehouse) REFERENCES Warehouse (IdWarehouse)
-- );

-- CREATE TABLE Person (
--     IdPerson INTEGER PRIMARY KEY,
--     Name VARCHAR NOT NULL,
--     MiddleName VARCHAR NOT NULL,
--     LastName VARCHAR NOT NULL,
--     IdentityDoc VARCHAR NOT NULL,
--     IdAddress INTEGER NOT NULL,
--     FOREIGN KEY (IdAddress) REFERENCES Address (IdAddress)
-- );

-- CREATE TABLE Customer (
--     IdPerson INTEGER NOT NULL,
--     Status VARCHAR NOT NULL,
--     Points INTEGER NOT NULL,
--     FOREIGN KEY (IdPerson) REFERENCES Person (IdPerson)
-- );

-- CREATE TABLE EmployeeJob (
--     IdJob INTEGER NOT NULL,
--     IdEmployee INTEGER NOT NULL,
--     HireDate DATE NOT NULL,
--     FOREIGN KEY (IdJob) REFERENCES Job (IdJob),
--     FOREIGN KEY (IdEmployee) REFERENCES Employee (IdEmployee)
-- );

-- CREATE TABLE Job (
--     IdJob INTEGER PRIMARY KEY,
--     Job VARCHAR NOT NULL,
--     Salary INTEGER NOT NULL
-- );

-- INSERT INTO Job (IdJob,Job,Salary)
-- VALUES (1,'Cantante',12000),
-- (2,'Programador',17000),
-- (3,'Actor',20000),
-- (4,'Futbolista',4000),
-- (5,'Arquitecto',28000),
-- (6,'Mago',5000),
-- (7,'Conserge',3800),
-- (8,'Fotografo',37920);

-- CREATE TABLE Address (
--     IdAddress INTEGER PRIMARY KEY,
--     IdCity INTEGER NOT NULL,
--     Detail VARCHAR NOT NULL,
--     FOREIGN KEY (IdCity) REFERENCES City (IdCity)
-- );

-- CREATE TABLE City (
--     IdCity INTEGER PRIMARY KEY,
--     IdState INTEGER NOT NULL,
--     Name VARCHAR NOT NULL,
--     FOREIGN KEY (IdState) REFERENCES State (IdState)
-- );

-- CREATE TABLE State (
--     IdState INTEGER PRIMARY KEY,
--     IdCountry INTEGER NOT NULL,
--     Name VARCHAR NOT NULL,
--     FOREIGN KEY (IdCountry) REFERENCES Country (IdCountry)
-- );

-- CREATE TABLE Country (
--     IdCountry INTEGER PRIMARY KEY,
--     Name VARCHAR NOT NULL
-- );

-- INSERT INTO Country (IdCountry,Name)
-- VALUES (2,'U.S.A'),
-- (3,'Francia'),
-- (4,'Mexico'),
-- (5,'Colombia'),
-- (6,'Argentina'),
-- (7,'Uruguay'),
-- (8,'Panama'),
-- (9,'Puerto Rico');


--PRUEBAS CON POSTGRESQL

-- SELECT * FROM Country;
--CREACION DE FUNCION
-- CREATE FUNCTION suma10(entero INT) RETURNS INT AS $$
-- BEGIN
-- RETURN entero + 10;
-- END; $$
-- LANGUAGE PLPGSQL;

-- SELECT suma10(8);

--FUNCION QUE RETORNA UNA TABLA
-- CREATE OR REPLACE FUNCTION get_job (p_pattern VARCHAR) 
--    RETURNS TABLE (
--       film_title VARCHAR,
--       film_release_year INT
-- ) 
-- AS $$
-- BEGIN
--    RETURN QUERY SELECT
--       job,
--       cast( salary as integer)
--    FROM
--       Job
--    WHERE
--       Job ILIKE p_pattern ;
-- END; $$ 
 
-- LANGUAGE 'plpgsql';

-- SELECT get_job('Actor%');

--ALTERAR UNA TABLA
-- UPDATE Job
-- SET Salary = 8888
-- WHERE
--     Job = 'Actor';

SELECT * FROM Job;